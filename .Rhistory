library(tidyverse)
library(DBI)
library(dbplyr)
library(RPostgreSQL)
library(tidyverse)
library(DBI)
library(dbplyr)
library(RPostgreSQL)
connection <- dbConnect(
RPostgreSQL::PostgreSQL(),
dbname   = 'public_usage',
host     = 'drenr.com',
port     = 5432,
user     = "linkedin",
password = "linkedin"
)
user_id = 10
ratings_clean = tbl(connection, in_schema('public', 'ratings_clean')) %>%
filter(user_id == local(user_id)) %>%
collect
recommendations_clean = tbl(connection, in_schema('public', 'recommendations_clean')) %>%
filter(user_id == local(user_id)) %>%
collect
dbDisconnect(connection)
ratings_clean
recommendations_clean
ratings_clean
source('~/.active-rstudio-document', echo=TRUE)
ratings_clean = tbl(connection, in_schema('public', 'ratings_clean')) %>%
filter(user_id == local(user_id)) %>%
arrange(desc(rating)) %>%
collect
recommendations_clean = tbl(connection, in_schema('public', 'recommendations_clean')) %>%
filter(user_id == local(user_id)) %>%
arrange(desc(rating)) %>%
collect
recommendations_clean = tbl(connection, in_schema('public', 'recommendations_clean')) %>%
filter(user_id == local(user_id)) %>%
arrange(desc(guessed_rating)) %>%
collect
ratings_clean
recommendations_clean
source('~/.active-rstudio-document', echo=TRUE)
ratings_clean %>% as.data.frame()
ratings_clean %>%
as.data.frame()
recommendations_clean %>%
as.data.frame()
children = tbl(connection, in_schema('public', 'ratings_clean')) %>%
filter(str_detect(genres, 'hildren')) %>%
group_by(user_id) %>%
count %>%
collect
connection <- dbConnect(
RPostgreSQL::PostgreSQL(),
dbname   = 'public_usage',
host     = 'drenr.com',
port     = 5432,
user     = "linkedin",
password = "linkedin"
)
children = tbl(connection, in_schema('public', 'ratings_clean')) %>%
filter(str_detect(genres, 'hildren')) %>%
group_by(user_id) %>%
count %>%
collect
children
children %>% arrange(desc(n))
user_id = 118205
ratings_clean = tbl(connection, in_schema('public', 'ratings_clean')) %>%
filter(user_id == local(user_id)) %>%
arrange(desc(rating)) %>%
collect
recommendations_clean = tbl(connection, in_schema('public', 'recommendations_clean')) %>%
filter(user_id == local(user_id)) %>%
arrange(desc(guessed_rating)) %>%
collect
dbDisconnect(connection)
ratings_clean %>%
as.data.frame()
recommendations_clean %>%
as.data.frame()
ratings_clean
children = tbl(connection, in_schema('public', 'ratings_clean')) %>%
group_by(user_id) %>%
summarise(children = sum(str_detect(genres, 'hildren'))/n()) %>%
collect
connection <- dbConnect(
RPostgreSQL::PostgreSQL(),
dbname   = 'public_usage',
host     = 'drenr.com',
port     = 5432,
user     = "linkedin",
password = "linkedin"
)
children = tbl(connection, in_schema('public', 'ratings_clean')) %>%
group_by(user_id) %>%
summarise(children = sum(str_detect(genres, 'hildren'))/n()) %>%
collect
sum(1:10)
n_children = tbl(connection, in_schema('public', 'ratings_clean')) %>%
filter(str_detect(genres, 'hildren')) %>%
group_by(user_id) %>%
count %>%
arrange(desc(n)) %>%
collect
n_movies = tbl(connection, in_schema('public', 'ratings_clean')) %>%
group_by(user_id) %>%
count %>%
arrange(desc(n)) %>%
collect
n_children
n_children %>%
left_join(n_movies, on = 'user_id')
n_movies %>%
transmute(user_id, mov_count = n)
n_movies %>%
ungroup %>%
transmute(user_id, mov_count = n)
n_movies <-
n_movies %>%
ungroup %>%
transmute(user_id, mov_count = n)
n_children %>%
left_join(n_movies, on = 'user_id')
n_children %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(desc(perc))
user_id = 15316
ratings_clean = tbl(connection, in_schema('public', 'ratings_clean')) %>%
filter(user_id == local(user_id)) %>%
arrange(desc(rating)) %>%
collect
recommendations_clean = tbl(connection, in_schema('public', 'recommendations_clean')) %>%
filter(user_id == local(user_id)) %>%
arrange(desc(guessed_rating)) %>%
collect
ratings_clean %>%
as.data.frame()
recommendations_clean %>%
as.data.frame()
n_children %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(perc)
user_id = 31517
ratings_clean = tbl(connection, in_schema('public', 'ratings_clean')) %>%
filter(user_id == local(user_id)) %>%
arrange(desc(rating)) %>%
collect
recommendations_clean = tbl(connection, in_schema('public', 'recommendations_clean')) %>%
filter(user_id == local(user_id)) %>%
arrange(desc(guessed_rating)) %>%
collect
ratings_clean %>%
as.data.frame()
recommendations_clean %>%
as.data.frame()
ratings_clean %>%
as.data.frame()
ratings_clean %>%
as.data.frame()
recommendations_clean %>%
as.data.frame()
library(tidyverse)
library(DBI)
library(dbplyr)
library(RPostgreSQL)
connection <- dbConnect(
RPostgreSQL::PostgreSQL(),
dbname   = 'public_usage',
host     = 'drenr.com',
port     = 5432,
user     = "linkedin",
password = "linkedin"
)
n_genres = tbl(connection, in_schema('public', 'ratings_clean')) %>%
filter(str_detect(genres, 'drama')) %>%
group_by(user_id) %>%
count %>%
arrange(desc(n)) %>%
collect
n_movies = tbl(connection, in_schema('public', 'ratings_clean')) %>%
group_by(user_id) %>%
count %>%
arrange(desc(n)) %>%
collect
n_movies <-
n_movies %>%
ungroup %>%
transmute(user_id, mov_count = n)
n_genres %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(perc)
n_genres
n_movies
n_movies = tbl(connection, in_schema('public', 'ratings_clean')) %>%
group_by(user_id) %>%
count %>%
arrange(desc(n)) %>%
collect
n_genres = tbl(connection, in_schema('public', 'ratings_clean')) %>%
filter(str_detect(str_to_lower(genres), 'drama')) %>%
group_by(user_id) %>%
count %>%
arrange(desc(n)) %>%
collect
n_movies <-
n_movies %>%
ungroup %>%
transmute(user_id, mov_count = n)
n_genres %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(perc)
n_genres %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(desc(perc))
n_genres %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(desc(perc)) %>%
filter(mov_count > 100)
n_genres %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(desc(perc)) %>%
filter(mov_count > 20)
user_id = 73280
ratings_clean = tbl(connection, in_schema('public', 'ratings_clean')) %>%
filter(user_id == local(user_id)) %>%
arrange(desc(rating)) %>%
collect
recommendations_clean = tbl(connection, in_schema('public', 'recommendations_clean')) %>%
filter(user_id == local(user_id)) %>%
arrange(desc(guessed_rating)) %>%
collect
ratings_clean %>%
as.data.frame()
recommendations_clean %>%
as.data.frame()
n_genres %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(desc(perc)) %>%
filter(mov_count > 20)
n_genres %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(desc(perc)) %>%
filter(mov_count > 20) %>%
.[1,1]
n_genres %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(desc(perc)) %>%
filter(mov_count > 20) %>%
.[1,1] %>%
.[[1]]
dbDisconnect(connection)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# user_id <-
n_genres %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(desc(perc)) %>%
filter(mov_count > 20)
# user_id <-
n_genres %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(desc(perc))
library(tidyverse)
library(DBI)
library(dbplyr)
library(RPostgreSQL)
connection <- dbConnect(
RPostgreSQL::PostgreSQL(),
dbname   = 'public_usage',
host     = 'drenr.com',
port     = 5432,
user     = "linkedin",
password = "linkedin"
)
n_genres = tbl(connection, in_schema('public', 'ratings_clean')) %>%
filter(str_detect(str_to_lower(title), 'lord of')) %>%
group_by(user_id) %>%
count %>%
arrange(desc(n)) %>%
collect
n_movies = tbl(connection, in_schema('public', 'ratings_clean')) %>%
group_by(user_id) %>%
count %>%
arrange(desc(n)) %>%
collect
n_movies <-
n_movies %>%
ungroup %>%
transmute(user_id, mov_count = n)
# user_id <-
n_genres %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(desc(perc))
# user_id <-
n_genres %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(desc(n))
# user_id <-
n_genres %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(desc(n)) %>%
filter(mov_count < 100)
# user_id <-
n_genres %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(perc %>% desc)
n_genres = tbl(connection, in_schema('public', 'ratings_clean')) %>%
filter(str_detect(str_to_lower(genre), 'fantasy')) %>%
group_by(user_id) %>%
count %>%
arrange(desc(n)) %>%
collect
n_movies = tbl(connection, in_schema('public', 'ratings_clean')) %>%
group_by(user_id) %>%
count %>%
arrange(desc(n)) %>%
collect
n_movies <-
n_movies %>%
ungroup %>%
transmute(user_id, mov_count = n)
# user_id <-
n_genres %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(perc %>% desc)
n_genres = tbl(connection, in_schema('public', 'ratings_clean')) %>%
filter(str_detect(str_to_lower(genres), 'fantasy')) %>%
group_by(user_id) %>%
count %>%
arrange(desc(n)) %>%
collect
n_movies = tbl(connection, in_schema('public', 'ratings_clean')) %>%
group_by(user_id) %>%
count %>%
arrange(desc(n)) %>%
collect
n_movies <-
n_movies %>%
ungroup %>%
transmute(user_id, mov_count = n)
# user_id <-
n_genres %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(perc %>% desc)
# user_id <-
n_genres %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(perc %>% desc)
# user_id <-
n_genres %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(perc %>% desc) %>%
.[1:10,]
# user_id <-
n_genres %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(perc %>% desc) %>%
.[1:10,] %>%
pull(user_id)
# user_id <-
n_genres %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(perc %>% desc) %>%
.[1:10,] %>%
pull(user_id) %>%
sample(1)
user_id <-
n_genres %>%
left_join(n_movies, on = 'user_id') %>%
mutate(perc = n/mov_count) %>%
arrange(perc %>% desc) %>%
.[1:10,] %>%
pull(user_id) %>%
sample(1)
ratings_clean = tbl(connection, in_schema('public', 'ratings_clean')) %>%
filter(user_id == local(user_id)) %>%
arrange(desc(rating)) %>%
collect
recommendations_clean = tbl(connection, in_schema('public', 'recommendations_clean')) %>%
filter(user_id == local(user_id)) %>%
arrange(desc(guessed_rating)) %>%
collect
ratings_clean %>%
as.data.frame()
recommendations_clean %>%
as.data.frame()
?sparklyr::ml_als
?sparklyr::ml_als
mtcars %>%
mutate(dr = dense_rank(cyl))
mtcars %>%
mutate(dr = dense_rank(cyl)) %>% arrange(cyl)
mtcars %>%
mutate(dr = dense_rank(cyl)) %>% arrange(cyl)
rank(c(1, 3, 4, 5, 10))
rank(c(1, 3, 4, 5, 5, 10))
dense_rank(c(1, 3, 4, 5, 5, 10))
